import { Link, createFileRoute } from '@tanstack/react-router'
import {
  createFormHook,
  createFormHookContexts,
  useForm,
} from '@tanstack/react-form'
import { z } from 'zod'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'

export const Route = createFileRoute('/login')({
  component: RouteComponent,
})
function RouteComponent() {
  return (
    <div>
      <Login1 />
    </div>
  )
}

interface loginValues {
  email: string
  password: string
}

const defaultLoginValues: loginValues = {
  email: '',
  password: '',
}

const loginSchema = z.object({
  email: z.string().email().min(3).max(30),
  password: z.string().min(3).max(30),
})

const Login1 = () => {
  const loginForm = useForm({
    defaultValues: defaultLoginValues,
    validators: {
      onChange: loginSchema,
    },
    onSubmit: async ({ value }) => console.log(value),
  })

  return (
    <section className="bg-muted h-screen">
      <div className="flex h-full items-center justify-center">
        <div className="flex flex-col items-center gap-6 lg:justify-start">
          <div className="min-w-sm border-muted bg-background flex w-full max-w-sm flex-col items-center gap-y-4 rounded-md border px-6 py-8 shadow-md">
            <h1 className="text-xl font-semibold">heading</h1>
            <loginForm.Field
              name="email"
              children={(field) => (
                <>
                  <Input
                    placeholder="Email"
                    type="email"
                    className="text-sm"
                    value={field.state.value}
                    onBlur={field.handleBlur}
                    onChange={(e) => field.handleChange(e.target.value)}
                  />
                </>
              )}
            />
            <loginForm.Field
              name="password"
              children={(field) => (
                <>
                  <Input
                    placeholder="Password"
                    type="password"
                    className="text-sm"
                    value={field.state.value}
                    onBlur={field.handleBlur}
                    onChange={(e) => field.handleChange(e.target.value)}
                  />
                </>
              )}
            />
          </div>
          <div className="text-muted-foreground flex justify-center gap-1 text-sm">
            <p></p>
            <Link to="/signup">
              <button className="text-primary font-medium hover:underline">
                Sign Up
              </button>
            </Link>
          </div>
        </div>
      </div>
    </section>
  )
}

const { fieldContext, formContext, useFieldContext } = createFormHookContexts()

function emailField() {
  const field = useFieldContext<string>()
  return (
    <label>
      <Input
        placeholder="Email"
        type="email"
        className="text-sm"
        value={field.state.value}
        onBlur={field.handleBlur}
        onChange={(e) => field.handleChange(e.target.value)}
      />
    </label>
  )
}

const { useAppForm } = createFormHook({
  fieldContext,
  formContext,
  fieldComponents: {
    emailField,
  },
  formComponents: {},
})

function Login2() {
  const form = useAppForm({
    defaultValues: {
      email: '',
      password: '',
    },
  })

  return (
    <form.AppField 
      name="email"
      children = { (field) => <field.emailField label="Email"}
    >  
  )
}
